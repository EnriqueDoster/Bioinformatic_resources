# Intro to R and RStudio ####

## Arithmetic operations ####
5
5 + 3
5 + 1 / 2 # Think first: is this 3 or 5.5
(5 + 1) / 2 
2^3 # Exponentiation
8 ^ (1/3) # Third root via exponentiation
7 %/% 2 # Integer division
7 %% 2  # Modulo operation (remainder of integer division)


## Making "R" objects ####
# Using the assignment operator '<-'
x <- 5
y <- 10

# Using the assignment operator '='
z = 15

# Print the variables
x
y
z


## R has different "data types" that function differently ####
# Numeric
num <- 42.5
num  # Output: 42.5

# Character (string)
char <- "Hello, R!"
char # Output: "Hello, R!"

# Logical (boolean)
bool <- TRUE
bool  # Output: TRUE

# Vector (a sequence of elements of the same type)
vec <- c(1, 2, 3, 4, 5)
vec  # Output: 1 2 3 4 5


# When in doubt, you can always check the "structure" of the object using "str()"
str(vec)

## Perform operations on variables ####
# Arithmetic operations
sum_test <- x + y
diff_test <- y - x
prod_test <- x * y
quot_test <- y / x

print(sum_test)  # Output: 15
print(diff_test) # Output: 5
print(prod_test) # Output: 50
print(quot_test) # Output: 2

# Logical operations
is_equal <- x == y
is_greater <- y > x

print(is_equal)    # Output: FALSE
print(is_greater)  # Output: TRUE

## Running functions on variables ####
# Function to calculate the mean of a vector
mean_val <- mean(vec)
print(mean_val)  # Output: 3

# Function to calculate the sum of a vector
sum_val <- sum(vec)
print(sum_val)  # Output: 15

# Function to find the length of a vector
len_val <- length(vec)
print(len_val)  # Output: 5

## Finally, the data.frame object ####
# Creating a data frame
data <- data.frame(
  Name = c("Alice", "Bob", "Charlie"),
  Age = c(25, 30, 35),
  Score = c(85, 90, 95)
)

# Print the data frame
data

str(data)

# Accessing columns in a data frame
data$Name
names <- data$Name

mean(data$Age)

# R built-in functions ####
# R has built in functions like "sum()" and "mean()"
#If you're ever having trouble understanding what a function does, type ??function_name
?sum
?mean
?rep
?plot

#  Load libraries to extend R's functionality ####
library(phyloseq)
library(readxl)
library(dplyr)
library(tibble)


# Look at spreadsheet with results
# Look at Lee's script to load datasets ####
########################### LOAD RAW DATA ####
############ MICROBIOME
otu_mat_mb <- read_excel("/home/training/epi_on_the_island2024/shotgun/counts_taxa_metadata/RumenDATA_phyloseq_Ver07.xlsx", sheet = "OTUS_matrix0.1") # bring in ASV count matrix
otu_mat_mb
tax_mat_mb <- read_excel("/home/training/epi_on_the_island2024/shotgun/counts_taxa_metadata/RumenDATA_phyloseq_Ver07.xlsx", sheet = "Taxonomy_table0.1") # bring in taxonomy info
tax_mat_mb
samples_df_mb <- read_excel("/home/training/epi_on_the_island2024/shotgun/counts_taxa_metadata/RumenDATA_phyloseq_Ver07.xlsx", sheet = "Samples") # bring in metadata
samples_df_mb

############ RESISTOME
otu_mat_rs <- read_excel("/home/training/epi_on_the_island2024/shotgun/counts_taxa_metadata/Rumen_AMR_AMR++v3.xlsx", sheet = "OTU_matrix") # bring in ARG count matrix
otu_mat_rs
tax_mat_rs <- read_excel("/home/training/epi_on_the_island2024/shotgun/counts_taxa_metadata/Rumen_AMR_AMR++v3.xlsx", sheet = "Taxonomy_table") # bring in ARG taxonomy
tax_mat_rs
samples_df_rs <- read_excel("/home/training/epi_on_the_island2024/shotgun/counts_taxa_metadata/Rumen_AMR_AMR++v3.xlsx", sheet = "Samples") # bring in metadata
samples_df_rs

############################ CREATE PHYLOSEQ OBJECTS ####
############ MICROBIOME

## count matrix
otu_mat_mb <- otu_mat_mb %>% # 1. define row names
  column_to_rownames("OTU")

OTU_mb <- as.matrix(otu_mat_mb) %>% # 2. convert to matrix and phyloseq object
  otu_table(taxa_are_rows = T)
OTU_mb # take a look!

## taxonomy table
tax_mat_mb <- tax_mat_mb %>% # 1. define row names
  column_to_rownames("OTU")

TAX_mb <- as.matrix(tax_mat_mb) %>% # 2. convert to matrix and phyloseq object
  tax_table()
TAX_mb # take a look

# metadata
samples_df_mb <- samples_df_mb %>% # 1. define row names
  column_to_rownames("samples")

SAM_mb = sample_data(samples_df_mb) # 2. convert to phyloseq object
SAM_mb # take a look

## combine all three into one phyloseq object
microbiome <- phyloseq(OTU_mb, TAX_mb, SAM_mb)
microbiome # 100 samples, 10,894 unique taxa

############ RESISTOME 
## count matrix
otu_mat_rs <- otu_mat_rs %>% # 1. define row names
  column_to_rownames("ARG")

OTU_rs <- as.matrix(otu_mat_rs) %>% # 2. convert to matrix and phyloseq object
  otu_table(taxa_are_rows = T)
OTU_rs # take a look!

## taxonomy table
tax_mat_rs <- tax_mat_rs %>% # 1. define row names
  column_to_rownames("ARG")

TAX_rs <- as.matrix(tax_mat_rs) %>% # 2. convert to matrix and phyloseq object
  tax_table()
TAX_rs # take a look

# metadata
samples_df_rs <- samples_df_rs %>% # 1. define row names
  column_to_rownames("samples")

SAM_rs = sample_data(samples_df_rs) # 2. convert to phyloseq object
SAM_rs # take a look

## combine all three into one phyloseq object
resistome <- phyloseq(OTU_rs, TAX_rs, SAM_rs)
resistome # 99 samples, 194 unique taxa




# Example of phyloseq functions ####

# Now, our data is stored in these two main objects "microbiome" and "resistome"
microbiome
resistome

# Check out the objects stored within each phyloseq object
otu_table(microbiome)

sample_data(microbiome)

sample_data(microbiome)$collection_day

sample_sums(microbiome)


# We can still use these objects inside other functions 
mean(sample_sums(microbiome))

